# Default values for acmedns.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: joohoi/acme-dns
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
serviceDNS:
  type: LoadBalancer
  annotations: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  tcpSocket:
    port: http
readinessProbe:
  tcpSocket:
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

persistent: 
  enabled: true
  size: 1Gi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

config: |
  [general]
  # DNS interface. Note that systemd-resolved may reserve port 53 on 127.0.0.53
  # In this case acme-dns will error out and you will need to define the listening interface
  # for example: listen = "127.0.0.1:53"
  listen = "0.0.0.0:53"
  # protocol, "both", "both4", "both6", "udp", "udp4", "udp6" or "tcp", "tcp4", "tcp6"
  protocol = "both"
  # domain name to serve the requests off of
  domain = "auth.example.org"
  # zone name server
  nsname = "auth.example.org"
  # admin email address, where @Â is substituted with .
  nsadmin = "admin.example.org"
  # predefined records served in addition to the TXT
  records = [
      # domain pointing to the public IP of your acme-dns server 
      "auth.example.org. A 198.51.100.1",
      # specify that auth.example.org will resolve any *.auth.example.org records
      "auth.example.org. NS auth.example.org.",
  ]
  # debug messages from CORS etc
  debug = false

  [database]
  # Database engine to use, sqlite3 or postgres
  engine = "sqlite3"
  # Connection string, filename for sqlite3 and postgres://$username:$password@$host/$db_name for postgres
  # Please note that the default Docker image uses path /var/lib/acme-dns/acme-dns.db for sqlite3
  connection = "/var/lib/acme-dns/acme-dns.db"
  # connection = "postgres://user:password@localhost/acmedns_db"

  [api]
  # listen ip eg. 127.0.0.1
  ip = "0.0.0.0"
  # disable registration endpoint
  disable_registration = false
  # listen port, eg. 443 for default HTTPS
  port = "80"
  # possible values: "letsencrypt", "letsencryptstaging", "cert", "none"
  tls = "none"
  acme_cache_dir = "api-certs"
  # optional e-mail address to which Let's Encrypt will send expiration notices for the API's cert
  notification_email = ""
  # CORS AllowOrigins, wildcards can be used
  corsorigins = [
      "*"
  ]
  # use HTTP header to get the client ip
  use_header = false
  # header name to pull the ip address / list of ip addresses from
  header_name = "X-Forwarded-For"

  [logconfig]
  # logging level: "error", "warning", "info" or "debug"
  loglevel = "debug"
  # possible values: stdout, TODO file & integrations
  logtype = "stdout"
  # file path for logfile TODO
  # logfile = "./acme-dns.log"
  # format, either "json" or "text"
  logformat = "json"

extraDeploy: []
  # - |
  #   apiVersion: v1
  #   kind: Secret
  #   type: Opaque
  #   metadata:
  #     name: foo
  #   stringData:
  #     for: bar